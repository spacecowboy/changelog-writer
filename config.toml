# Changelog specifies the structure of the changelog
[changelog]
# Each value is a top level header which can define optional sub headers
Docs = ["Fixed typos", "Enchancements"]
Code = ["Bug fixes", "Features"]

# Commits which are to be included in the change log are searched for
# in the specified revisions (branches/tags). Each revision will get
# its own change log.
[git]
revs = ["master"]
#name = "A much better name for change log purposes/filename?"

# Tag your commits with a specified `key`, as in this example commit
#
#     Fixes #99
#     This fixes an annoying #bug.
#
# This would identify the commit as something which should be included
# under the name specified for the `bug` tag. If no name is specified,
# it will default to the key. Avoid numbers as this will likely
# conflict with GitHub's issue numbers.
#
# If a commit is tagged with multiple tags, it will be placed in
# whatever is defined first in this file, not both.
#
# If several tags define the same name, the two tags will be merged
# under a single heading.
# TODO: sub tags?
[[git.tags]]
key = "#bug"
name = "Bug fixes"

[[git.tags]]
key = "#feature"
name = "Enhancements"

[[git.tags]]
key = "#enhancement"
name = "Enhancements"

#[[git.tags]]
#key = "#changelog"
#name = "Misc"

[github]
# Generate a token [here](https://github.com/settings/tokens). No
# special permissions are required.
#
# You can also provide this token as a cmdline argument
# (--github_token=XYZ) or as an environment variable (GITHUB_TOKEN).
# If multiple, priority is: cmdline, config, envvar.
#token =

user = "spacecowboy"
#repo = "changelog-writer"
repo = "notepad"
